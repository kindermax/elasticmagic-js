(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{96:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return r})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return u}));var a=n(1),i=n(7),s=(n(0),n(105)),c={id:"getting_started",title:"Getting started with Elasticmagic",sidebar_label:"Getting started with Elasticmagic"},r={id:"getting_started",title:"Getting started with Elasticmagic",description:"Elasticmagic is a Elasticsearch query builder and ORM for JavaScript/Typescript.",source:"@site/docs/getting_started.md",permalink:"/docs/getting_started",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/getting_started.md",sidebar_label:"Getting started with Elasticmagic",sidebar:"someSidebar",next:{title:"Installation",permalink:"/docs/installation"}},l=[{value:"Installation",id:"installation",children:[]},{value:"Basic example",id:"basic-example",children:[]}],o={rightToc:l};function u(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(s.b)("wrapper",Object(a.a)({},o,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)("p",null,"Elasticmagic is a Elasticsearch query builder and ORM for JavaScript/Typescript."),Object(s.b)("p",null,"It helps you easily build queries which are typed and safe. "),Object(s.b)("p",null,"You do not need to remember how to write ",Object(s.b)("inlineCode",{parentName:"p"},"json")," DSL for Elasticsearch, Elasticmagic will do it for you."),Object(s.b)("h2",{id:"installation"},"Installation"),Object(s.b)("p",null,"To install Elasticmagic via NPM:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"npm install --save elasticmagic\n")),Object(s.b)("p",null,"Also you need an Elasticseach official js client"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"npm install --save @elastic/elasticsearch\n")),Object(s.b)("h2",{id:"basic-example"},"Basic example"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"import { Client } from '@elastic/elasticsearch';\nimport { \n  Cluster,\n  Field,\n  IntegerType,\n  Doc,\n  Bool,\n} from \"elasticmagic-js\";\n\n\n/**\n * Here we creating our document which maps structure of same document in Elasticsearch.  \n * \n * We will use this class as our query builder.\n * Also when we will get result from elasticsearch, we instantiate this class\n * and populate it with data from Elasticsearch hits.\n * \n * First we declare docType - it must be the same as document in Elasticsearch mapping. \n * \n * Then we declare static fields that will be user to build our queries. \n * As we do not need an instance of this class to build queries, the fields are static.\n * \n * Next, conventionaly, we declare instance properties, as you can see, with almost same name. \n * Then lettercase is same as fields in Elasticseach mapping\n * \n * And thats is.  \n */\nclass OrderDoc extends Doc {\n  public static docType: string = 'order';\n\n  public static userId = new Field(IntegerType, 'user_id', OrderDoc);\n  public user_id?: number;\n\n  public static status = new Field(IntegerType, 'status', OrderDoc);\n  public status?: number;\n\n  public static source = new Field(IntegerType, 'source', OrderDoc);\n  public source?: number;\n\n  public static price = new Field(IntegerType, 'price', OrderDoc);\n  public price?: number;\n\n  public static dateCreated = new Field(DateType, 'date_created', OrderDoc);\n  public date_created?: Date;\n}\n\n// Create a Elasticsearch client which will be passed to cluster.\nconst client = new Client({ node: 'http://es6-test:9200' });\n// Create cluster instance. Its an entrypiint for interacting with Elasticsearch.\nconst cluster = new Cluster(client, 'test_order_index');\n\n\n// Lets start building our query.\n// Calling searchQuery method we start creating new query.\n// We using builder pattern, so you can chain any amount of methods\nconst query = cluster.searchQuery({ routing: 1 })\n  .source(false)\n  .filter(\n    Bool.must(\n      OrderDoc.user_id.in([1]),\n      OrderDoc.status.in([1, 2]),\n      OrderDoc.source.not(1),\n      OrderDoc.dateCreated.lte(new Date().toISOString())\n    )\n  )\n  .limit(0);\n\n// To make a query to Elasticsearch we calling getResult.\nconst result = await query.getResult<OrderDoc>();\nconsole.log(result.getIds()); // prints [1]\n\nconst hit = result.hits[0];\nconsole.log(hit.user_id); // prints 1\n")),Object(s.b)("p",null,"We can check what query Elasticmagic will build for us."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"console.log(query.toJSON()) \n// or alias \nconsole.log(query.body)\n\n// to see prettified query\nconsole.log(query.prettyQuery)\n")))}u.isMDXComponent=!0}}]);