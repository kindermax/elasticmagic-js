(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{108:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=a.a.createContext({}),u=function(e){var t=a.a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s({},t,{},e)),n},p=function(e){var t=u(e.components);return a.a.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,o=l(e,["components","mdxType","originalType","parentName"]),p=u(n),b=r,m=p["".concat(c,".").concat(b)]||p[b]||d[b]||i;return n?a.a.createElement(m,s({ref:t},o,{components:n})):a.a.createElement(m,s({ref:t},o))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,c=new Array(i);c[0]=b;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,c[1]=s;for(var o=2;o<i;o++)c[o]=n[o];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},99:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return u}));var r=n(1),a=n(6),i=(n(0),n(108)),c={id:"getting_started",title:"Getting started with Elasticmagic",sidebar_label:"Getting started with Elasticmagic"},s={id:"getting_started",title:"Getting started with Elasticmagic",description:"Elasticmagic is a Elasticsearch query builder and ORM for JavaScript/Typescript.",source:"@site/docs/getting_started.md",permalink:"/docs/getting_started",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/getting_started.md",sidebar_label:"Getting started with Elasticmagic",sidebar:"someSidebar",next:{title:"Installation",permalink:"/docs/installation"}},l=[{value:"Installation",id:"installation",children:[]},{value:"Basic example",id:"basic-example",children:[]}],o={rightToc:l};function u(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},o,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Elasticmagic is a Elasticsearch query builder and ORM for JavaScript/Typescript."),Object(i.b)("p",null,"It helps you easily build queries which are typed and safe. "),Object(i.b)("p",null,"You do not need to remember how to write ",Object(i.b)("inlineCode",{parentName:"p"},"json")," DSL for Elasticsearch, Elasticmagic will do it for you."),Object(i.b)("h2",{id:"installation"},"Installation"),Object(i.b)("p",null,"To install Elasticmagic via NPM:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bash"}),"npm install --save elasticmagic\n")),Object(i.b)("p",null,"Also you need an Elasticseach official js client"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bash"}),"npm install --save @elastic/elasticsearch\n")),Object(i.b)("h2",{id:"basic-example"},"Basic example"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),"import { Client } from '@elastic/elasticsearch';\nimport { \n  Cluster,\n  Field,\n  IntegerType,\n  Doc,\n  Bool,\n} from \"elasticmagic-js\";\n\n\n/**\n * Here we creating our document which maps structure of same document in Elasticsearch.  \n * \n * We will use this class as our query builder.\n * Also when we will get result from elasticsearch, we instantiate this class\n * and populate it with data from Elasticsearch hits.\n * \n * First we declare docType - it must be the same as document in Elasticsearch mapping. \n * \n * Then we declare static fields that will be user to build our queries. \n * As we do not need an instance of this class to build queries, the fields are static.\n * \n * Next, conventionaly, we declare instance properties, as you can see, with almost same name. \n * Then lettercase is same as fields in Elasticseach mapping\n * \n * And thats is.  \n */\nclass OrderDoc extends Doc {\n  public static docType: string = 'order';\n\n  public static userId = new Field(IntegerType, 'user_id', OrderDoc);\n  public user_id?: number;\n\n  public static status = new Field(IntegerType, 'status', OrderDoc);\n  public status?: number;\n\n  public static source = new Field(IntegerType, 'source', OrderDoc);\n  public source?: number;\n\n  public static price = new Field(IntegerType, 'price', OrderDoc);\n  public price?: number;\n\n  public static dateCreated = new Field(DateType, 'date_created', OrderDoc);\n  public date_created?: Date;\n}\n\n// Create a Elasticsearch client which will be passed to cluster.\nconst client = new Client({ node: 'http://es6-test:9200' });\n// Create cluster instance. Its an entrypiint for interacting with Elasticsearch.\nconst cluster = new Cluster(client, 'test_order_index');\n\n\n// Lets start building our query.\n// Calling searchQuery method we start creating new query.\n// We using builder pattern, so you can chain any amount of methods\nconst query = cluster.searchQuery({ routing: 1 })\n  .source(true)\n  .filter(\n    Bool.must(\n      OrderDoc.user_id.in([1]),\n      OrderDoc.status.in([1, 2]),\n      OrderDoc.source.not(1),\n      OrderDoc.dateCreated.lte(new Date().toISOString())\n    )\n  );\n\n// To make a query to Elasticsearch we calling getResult.\nconst result = await query.getResult<OrderDoc>();\nconsole.log(result.getIds()); // prints [\"1\"]\n\nconst hit = result.hits[0];\nconsole.log(hit.user_id); // prints 1\n")),Object(i.b)("p",null,"We can check what query Elasticmagic will build for us."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),"console.log(query.toJSON()) \n// or alias \nconsole.log(query.body)\n\n// to see prettified query\nconsole.log(query.prettyQuery)\n")))}u.isMDXComponent=!0}}]);