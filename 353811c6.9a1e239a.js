(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{110:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return l}));var a=n(1),r=n(6),o=(n(0),n(155)),i={id:"aggregations",title:"Aggregations"},c={id:"aggregations",title:"Aggregations",description:"Elasticmagic DSL allows you to define aggregations on any complexity.",source:"@site/docs/aggregations.md",permalink:"/docs/aggregations",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/aggregations.md",sidebar:"docs",previous:{title:"Querying",permalink:"/docs/querying"},next:{title:"Instance mapper",permalink:"/docs/instance_mapper"}},p=[{value:"How it works",id:"how-it-works",children:[]}],s={rightToc:p};function l(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Elasticmagic DSL allows you to define aggregations on any complexity."),Object(o.b)("h2",{id:"how-it-works"},"How it works"),Object(o.b)("h4",{id:"aggregations"},"Aggregations"),Object(o.b)("h5",{id:"basic-api"},"Basic API"),Object(o.b)("p",null,"To start writing aggregations we can reuse ",Object(o.b)("inlineCode",{parentName:"p"},"LaptopDoc")," from ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/querying"}),"Querying")," page."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"import { \n  Doc, \n  Field,\n\n  StringType,\n  IntegerType,\n  DateType,\n  BooleanType,\n  FloatType,\n} from 'elasticmagic';\n\nclass LaptopDoc extends Doc {\n  public static docType: string = 'laptop';\n\n  public static model = new Field(StringType, 'model', Laptop);\n  public static cpu = new Field(IntegerType, 'cpu', Laptop);\n  public static price = new Field(FloatType, 'price', Laptop);\n  public static manufacturerId = new Field(IntegerType, 'manufacturer_id', Laptop);\n  public static manufacturedAt = new Field(DateType, 'manufactured_at', Laptop);\n  public static forGames = new Field(BooleanType, 'for_games', Laptop);\n\n  public model?: string;\n  public cpu?: number;\n  public price?: number;\n  public manufactured_id?: number;\n  public manufactured_at?: string; // ISO format string\n  public for_games?: boolean;\n} \n")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"SearchQuery")," instance has a ",Object(o.b)("inlineCode",{parentName:"p"},".aggregations()")," (with short alias ",Object(o.b)("inlineCode",{parentName:"p"},".aggs()"),") method."),Object(o.b)("p",null,"It accepts object where key is a name of aggregation and value can be one of expressions:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"agg.Terms"))),Object(o.b)("h5",{id:"start-wrinting-aggregations"},"Start wrinting aggregations"),Object(o.b)("p",null,"Conventionaly, you can import all aggregation related stuff as:"),Object(o.b)("p",null,"TODO - test this code and decide"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"import * as aggs from 'elasticmagic/aggs';\n// or\nimport { aggs } from 'elasticmagic';\n")),Object(o.b)("p",null,"Lets add some aggregations. "),Object(o.b)("p",null,"Suppose we want to get an aggregated list of prices."),Object(o.b)("p",null,"First we filter docs by ",Object(o.b)("inlineCode",{parentName:"p"},"manufacturerIds")," list."),Object(o.b)("p",null,"Then we create aggregation on ",Object(o.b)("inlineCode",{parentName:"p"},"LaptopDoc.price")," field, which means we want to collect (aggregate) prices for that manufacturers laptops."),Object(o.b)("p",null,"Also we are specifying nested aggregation named ",Object(o.b)("inlineCode",{parentName:"p"},"forGames")," - it represents amount laptops which are suited for gaming."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"\nimport { \n  Doc, \n  Field,\n\n  StringType,\n  IntegerType,\n  DateType,\n  BooleanType,\n  FloatType,\n\n  Bool,\n} from 'elasticmagic';\n\nimport * as aggs from 'elasticmagic/aggs';\n\nconst manufacturerIds = [1, 2, 3];\n\nconst query = new SearchQuery()\n  .limit(0)\n  .source(false)\n  .filter(\n    LaptopDoc.manufacturedId.in(manufacturerIds)\n  )\n  .aggregations({\n    prices: new aggs.Terms({\n      field: LaptopDoc.price,\n      /**\n       *  if actual size of matched docs is unknown at the moment of building the query, \n       *  we can set some big value, such as 10 ** 4\n       */\n      size: 10 ** 4,  \n      aggs: {\n        forGames: new aggs.Filter({\n          filter: LaptopDoc.forGames.eq(true),\n        })\n      }\n    })\n  });\n\nconst result = await qeury.getResult<LaptopDoc>();\n\nconst pricesBucket = result.getAggregation('prices');\n\nconst priceBucket = pricesBucket[0];\n\nconsole.log(priceBucket.key); // prints price\n\nconst forGamesBucket = priceBucket.getAggregation('forGames');\n\nconsole.log(forGamesBucket.docCount); // prints laptops amount suited for gaming\n\n")),Object(o.b)("p",null,"We calling ",Object(o.b)("inlineCode",{parentName:"p"},".limit(0)")," to say we do not need elasticsearch to limit our query.  "),Object(o.b)("p",null,"Also we calling ",Object(o.b)("inlineCode",{parentName:"p"},".source(false)")," to say we do not need elasticsearch to include source of docs in response."),Object(o.b)("p",null,"As you can see, its pretty easy and straitforward to write an aggregations."))}l.isMDXComponent=!0},155:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),l=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c({},t,{},e)),n},u=function(e){var t=l(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=l(n),b=a,m=u["".concat(i,".").concat(b)]||u[b]||g[b]||o;return n?r.a.createElement(m,c({ref:t},s,{components:n})):r.a.createElement(m,c({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=b;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=n[s];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);